import { DataTypes, Model, Optional, Sequelize } from 'sequelize';

interface IAmlDataAttributes {
  date_of_birth: string;
  first_name: string;
  last_name: string;
}
export class AmlInstance extends Optional<IAmlDataAttributes>{
  declare date_of_birth: string;
  declare first_name: string;
  declare last_name: string;
}

interface IAmlSchemaAttributes {
  idempotency_ref: string;
  data_type: string;
  aml: IAmlDataAttributes;
}

export class AmlSchemaAttributes extends<IAmlSchemaAttributes> {
   declare idempotency_ref: string;
  declare data_type: string;
  declare aml: IAmlDataAttributes;
}


AmlInstance.init(
  {
    date_of_birth: {
      type: DataTypes.DATEONLY,
      allowNull: false
    },
    first_name: {
      type: DataTypes.STRING,
      allowNull: false
    },
    last_name: {
      type: DataTypes.STRING,
      allowNull: false
    }
  },
  {
    sequelize,
    modelName: 'AmlData'
  }
);

AmlSchema.init(
  {
    idempotency_ref: {
      type: DataTypes.UUID,
      defaultValue: DataTypes.UUIDV4,
      primaryKey: true
    },
    data_type: {
      type: DataTypes.STRING,
      allowNull: false,
      defaultValue: 'aml'
    },
    aml: {
      type: DataTypes.JSONB,
      allowNull: false,
      validate: {
        isValidAml(value: AmlDataAttributes) {
          if (!value || !value.date_of_birth || !value.first_name || !value.last_name) {
            throw new Error('Invalid AML data');
          }
        }
      }
    }
  },
  {
    sequelize,
    modelName: 'AmlSchema'
  }
);

AmlData.belongsTo(AmlSchema, { foreignKey: 'idempotency_ref' });

export { AmlData, AmlSchema };
